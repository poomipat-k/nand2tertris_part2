Test programs order

- Seven
  1. simple program
  2. Arithmetic expression involving constants only
  3. do statement
  4. return statement
- ConvertToBin
  1. expressions (without arrays, without method calls)
  2. statements (if, while, do, let, return)
- Square
  1. constructors
  2. methods
  3. expressions that include method calls
- Average
  1. arrays
  2. strings
- Pong
  1. complete object-oriented application, including the handling of objects and static variables
- ComplexArrays
  1. array manipulations using index expressions that include complex array references

Scripts

go run main.go tests/Seven

go run main.go tests/Square/Main.jack

go run main.go tests/ConvertToBin

=========================================
// /_ 'do' subroutineCall ';' _/
// func (e \*Engine) CompileDo() {
// fmt.Println("--- CompileDo ---")
// // e.WriteString("<doStatement>\n")
// // e.writeKeyword()

// e.tk.Advance()
// if e.tk.TokenType() != jackTokenizer.IDENTIFIER {
// log.Fatal("CompileDo, expect an identifier")
// }

// // could be [subroutineName, (className | varName).subroutineName]
// prevId := e.tk.Identifier()

// e.tk.Advance()
// if e.tk.Symbol() == "(" {
// // then "prevId" is a subroutine Name

// // e.writeIdentifier(prevId, "used", symbolTable.SUBROUTINE)

// // e.writeSymbol()

// e.tk.Advance()
// e.CompileExpressionList()

// if e.tk.Symbol() != ")" {
// log.Fatal("CompileDo, expect a ')'")
// }
// // e.writeSymbol()

// } else if e.tk.Symbol() == "." {
// // "prevId" is either a className or a varName
// if e.subroutineST.KindOf(prevId) != "" {
// // e.writeIdentifier(prevId, "used", e.subroutineST.KindOf(prevId))
// } else if e.classST.KindOf(prevId) != "" {
// // e.writeIdentifier(prevId, "used", e.classST.KindOf(prevId))
// } else {
// // e.writeIdentifier(prevId, "used", symbolTable.CLASS)
// }

// // .
// // e.writeSymbol()

// e.tk.Advance()
// if e.tk.TokenType() != jackTokenizer.IDENTIFIER {
// log.Fatal("CompileDo className|varName (identifier) (expect identifier), got:", e.tk.Token())
// }
// // e.writeIdentifier(e.tk.Identifier(), "used", symbolTable.SUBROUTINE)

// e.tk.Advance()
// if e.tk.Symbol() != "(" {
// log.Fatal("CompileDo expect '('")
// }
// // e.writeSymbol()

// e.tk.Advance()
// e.CompileExpressionList()

// if e.tk.Symbol() != ")" {
// log.Fatal("CompileDo, expect a ')'")
// }
// // e.writeSymbol()
// } else {
// log.Fatal("CompileDo not supported token, got: ", e.tk.Token())
// }

// e.tk.Advance()
// if e.tk.Symbol() != ";" {
// log.Fatal("CompileDo, expect a ';', got: ", e.tk.Token())
// }
// // e.writeSymbol()
// // e.WriteString("</doStatement>\n")

// e.vmWriter.WritePop("temp", 0)
// }
