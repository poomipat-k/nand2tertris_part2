<class>
<keyword> class </keyword>
<identifier_dec_class> Main </identifier_dec_class>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier_dec_subroutine> main </identifier_dec_subroutine>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier_used_class> SquareGame </identifier_used_class>
<identifier_dec_var_0> game </identifier_dec_var_0>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_used_var_0> game </identifier_used_var_0>
<symbol> = </symbol>
<expression>
<term>
<identifier_used_class> SquareGame </identifier_used_class>
<symbol> . </symbol>
<identifier_used_subroutine> new </identifier_used_subroutine>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_used_var_0> game </identifier_used_var_0>
<symbol> . </symbol>
<identifier_used_subroutine> run </identifier_used_subroutine>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_used_var_0> game </identifier_used_var_0>
<symbol> . </symbol>
<identifier_used_subroutine> dispose </identifier_used_subroutine>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
