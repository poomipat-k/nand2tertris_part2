<class>
    <keyword> class </keyword>
    <identifier_dec_class> SquareGame </identifier_dec_class>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> field </keyword>
        <identifier_dec_subroutine> Square </identifier_dec_subroutine>
        <identifier_dec_subroutine> square </identifier_dec_subroutine>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> int </keyword>
        <identifier_dec_subroutine> direction </identifier_dec_subroutine>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> constructor </keyword>
        <identifier_dec_subroutine> SquareGame </identifier_dec_subroutine>
        <identifier_dec_subroutine> new </identifier_dec_subroutine>
        <symbol> ( </symbol>
        <parameterList>
</parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier_used_subroutine> square </identifier_used_subroutine>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier_used_subroutine> Square </identifier_used_subroutine>
                            <symbol> . </symbol>
                            <identifier_used_subroutine> new </identifier_used_subroutine>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <integerConstant> 0 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 0 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 30 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier_used_subroutine> direction </identifier_used_subroutine>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <keyword> this </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier_dec_subroutine> dispose </identifier_dec_subroutine>
        <symbol> ( </symbol>
        <parameterList>
</parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier_used_subroutine> square </identifier_used_subroutine>
                    <symbol> . </symbol>
                    <identifier_used_subroutine> dispose </identifier_used_subroutine>
                    <symbol> ( </symbol>
                    <expressionList>
</expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier_used_subroutine> Memory </identifier_used_subroutine>
                    <symbol> . </symbol>
                    <identifier_used_subroutine> deAlloc </identifier_used_subroutine>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> this </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier_dec_subroutine> moveSquare </identifier_dec_subroutine>
        <symbol> ( </symbol>
        <parameterList>
</parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier_used_subroutine> direction </identifier_used_subroutine>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier_used_subroutine> square </identifier_used_subroutine>
                            <symbol> . </symbol>
                            <identifier_used_subroutine> moveUp </identifier_used_subroutine>
                            <symbol> ( </symbol>
                            <expressionList>
</expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier_used_subroutine> direction </identifier_used_subroutine>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 2 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier_used_subroutine> square </identifier_used_subroutine>
                            <symbol> . </symbol>
                            <identifier_used_subroutine> moveDown </identifier_used_subroutine>
                            <symbol> ( </symbol>
                            <expressionList>
</expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier_used_subroutine> direction </identifier_used_subroutine>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 3 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier_used_subroutine> square </identifier_used_subroutine>
                            <symbol> . </symbol>
                            <identifier_used_subroutine> moveLeft </identifier_used_subroutine>
                            <symbol> ( </symbol>
                            <expressionList>
</expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier_used_subroutine> direction </identifier_used_subroutine>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 4 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier_used_subroutine> square </identifier_used_subroutine>
                            <symbol> . </symbol>
                            <identifier_used_subroutine> moveRight </identifier_used_subroutine>
                            <symbol> ( </symbol>
                            <expressionList>
</expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier_used_subroutine> Sys </identifier_used_subroutine>
                    <symbol> . </symbol>
                    <identifier_used_subroutine> wait </identifier_used_subroutine>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 5 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier_dec_subroutine> run </identifier_dec_subroutine>
        <symbol> ( </symbol>
        <parameterList>
</parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier_dec_subroutine> key </identifier_dec_subroutine>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier_dec_subroutine> exit </identifier_dec_subroutine>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier_used_subroutine> exit </identifier_used_subroutine>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <keyword> false </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <identifier_used_subroutine> exit </identifier_used_subroutine>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <whileStatement>
                            <keyword> while </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier_used_subroutine> Keyboard </identifier_used_subroutine>
                                            <symbol> . </symbol>
                                            <identifier_used_subroutine> keyPressed </identifier_used_subroutine>
                                            <symbol> ( </symbol>
                                            <expressionList>
</expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier_used_subroutine> moveSquare </identifier_used_subroutine>
                                    <symbol> ( </symbol>
                                    <expressionList>
</expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </whileStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 81 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> exit </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <keyword> true </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 90 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier_used_subroutine> square </identifier_used_subroutine>
                                    <symbol> . </symbol>
                                    <identifier_used_subroutine> decSize </identifier_used_subroutine>
                                    <symbol> ( </symbol>
                                    <expressionList>
</expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 88 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier_used_subroutine> square </identifier_used_subroutine>
                                    <symbol> . </symbol>
                                    <identifier_used_subroutine> incSize </identifier_used_subroutine>
                                    <symbol> ( </symbol>
                                    <expressionList>
</expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 131 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> direction </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 133 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> direction </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 130 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> direction </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 3 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 132 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> direction </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 4 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <whileStatement>
                            <keyword> while </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier_used_subroutine> key </identifier_used_subroutine>
                                            </term>
                                            <symbol> = </symbol>
                                            <term>
                                                <integerConstant> 0 </integerConstant>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier_used_subroutine> key </identifier_used_subroutine>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier_used_subroutine> Keyboard </identifier_used_subroutine>
                                            <symbol> . </symbol>
                                            <identifier_used_subroutine> keyPressed </identifier_used_subroutine>
                                            <symbol> ( </symbol>
                                            <expressionList>
</expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier_used_subroutine> moveSquare </identifier_used_subroutine>
                                    <symbol> ( </symbol>
                                    <expressionList>
</expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </whileStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>