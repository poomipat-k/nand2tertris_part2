// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;
        let n = 16;
        let i = 1;
        let powersOfTwo = Array.new(n);
        powersOfTwo[0] = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, xShifted, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < n) {
            if (bit(y, i)) {
                let sum = sum + shiftedX;
            }
            shiftedX = shiftedX + shiftedX;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int ax, ay;
        var bool isPos;
        let ax = abs(x);
        let ay = abs(y);
        let isPos = (x > 0 & y > 0) | (x = 0) | (x < 0 & y < 0);
        if (isPos) {
            return divideHelper(ax, ay);
        }
        return -divideHelper(ax, ay);
    }

    // x and y is abs value
    function int divideHelper(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = divideHelper(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }
        return 2 * q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, k;
        if (x < 0) {
            return 0;
        }
        let y = 0;
        let j = (n / 2) - 1;
        while (~(j < 0)) {
            let k = (y + powersOfTwo[j]) * (y + powersOfTwo[j]);
            if ((~(k > x)) & (k > 0)) {
                let y = y + powersOfTwo[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } 
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns true if the i-th bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
        return false;
    }
}
