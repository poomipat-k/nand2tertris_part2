// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var Array cur;
        var Array base;
        if (~(size > 0)) {
             do Sys.error(5);
        }

        let cur = freeList;
        while (~(cur = 0)) {
            if (~(cur[1] < (size + 2))) {
                // let base = cur[0] + (cur[1] - size);
                let base = cur + (cur[1] - size);
                let base[0] = 0;
                let base[1] = size;
                let cur[1] = cur[1] - size - 2;
                return (base + 2);
            }
            let cur = cur[0]; // go next item on the list
        }
        do Sys.error(6);
        return base;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array base;
        let base = o - 2;
        let base[0] = freeList;
        let freeList = base;
        return;
    }    
}
